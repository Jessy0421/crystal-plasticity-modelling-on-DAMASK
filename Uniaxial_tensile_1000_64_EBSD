name: Uniaxial_tensile_1000_64_EBSD

tasks:
  - name: generate_microstructure_seeds
    method: random
    software: damask
    base:      
      grid_size: [64, 64, 64] 
      num_grains: 1000
      size: [1,1,1] # Dimensions of the RVE
      phase_label: Al
      orientation_coordinate_system:
        x: RD
        y: TD
        z: ND
      
  - name: sample_orientations #This task imports a certain number of orientations from an experimental EBSD map
    method: from_CTF_file
    software: mtex
    base:
      CTF_file_path: /net/scratch2/y19520jy/data/0_slice_XZ_0.ctf
      specimen_symmetry: monoclinic
      phase: Aluminium # Change to mtex phase
      num_orientations: 1000 #In this case, 1000 orientations are imported from the experimental EBSD data file
      reference_frame_transformation: euler_to_spatial
        
  - name: generate_volume_element #This task links the tasks 1 and 2
    method: random_voronoi_from_orientations #The orientations imported in task 2 are added to the RVE generated in task 1
    software: damask
    base:
      homog_label: SX
      scale_morphology: [1, 1, 1]
      
  - name: generate_load_case #This task defines the load that is going to be applied to the RVE
    method: uniaxial
    software: formable
    base: #In this case, the loadcase is uniaxial tension to a target strain of 0.15
      total_times:         [100] 
      num_increments:      [800]  #Number of steps of the simulation
      target_strain_rates: [1.5e-3] # used for numerical reasons, this is not the experimental target strain, is not the m value
      directions:          [x]
      dump_frequency: [1]
    sequences:
      - name: 
        vals:
          - - axis: [0, 0, 1]
              angle_deg: 0
          - - axis: [0, 0, 1]
              angle_deg: 45
          - - axis: [0, 0, 1]
              angle_deg: 90 
              
  - name: simulate_volume_element_loading #This task applies the load to the RVE and outputs the data of interest from the simulation
    method: CP_FFT
    software: DAMASK
    contexts: uniaxial
    run_options:
      num_cores: 4
      l: mem256 # include for long simulations
      processing:
        num_cores: 4
        l: mem512 # include for long simulations

    output_map_options:
      operations:
        - name: add_stress_Cauchy
          args: { P: P, F: F }
          opts: { add_Mises: true }
        - name: add_strain
          args: { F: F, t: V, m: 0 }
          opts: { add_Mises: true }
          
      phase_data: #Averaged data for each increment of the simulation
        - field_name: sigma_vM #Output of the averaged VM stress for each increment
          phase_name: Al
          out_name: vol_avg_equivalent_stress
          transforms: [mean_along_axes: 1]
          increments:
            - step: 10
        - field_name: epsilon_V^0(F)_vM #Output of the averaged VM strain for each increment
          phase_name: Al
          out_name: vol_avg_equivalent_strain
          transforms: [mean_along_axes: 1]
          increments:
            - step: 10
            
      field_data: # Data for each voxel of the RVE
        - field_name: sigma_vM #Output of VM stress for each voxel of the RVE
          increments:
            - start: 0
              stop: -1
              step: 100
        - field_name: epsilon_V^0(F)_vM #Output of VM strain for each voxel of the RVE
          increments:
            - start: 0
              stop: -1
              step: 100
              
            
      visualise: # Generate VTR files for increments:  [0, 100, 200, 300, 400, 500, 600, 700 and 800]
        fields: [F, P, sigma_vM, epsilon_V^0(F)_vM]
        increments:
          - start: 0
            stop: -1
            step: 100
                  
    base:
      homogenization_schemes:
        SX:
          mechanical: 
            type: pass
          N_constituents: 1
      phases: #The phases of the model are: Al for the RVE and air for the buffer layer
        Al:
          lattice: cF 
          mechanical:
            output: [F, P] 
            elastic:
              type: hooke             
              C_11: 107.3e9
              C_12: 60.9e9
              C_44: 28.3e9    
            plastic: #Here we need to introduce the crystal plasticity parameters optimised before
              N_sl: [12]
              a_sl: 0.799584798  #optimised         
              atol_xi: 1.0
              dot_gamma_0_sl: 0.001
              h_0_sl_sl: 387154877 #optimised 
              h_sl_sl: [1, 1, 1.4, 1.4, 1.4, 1.4]
              n_sl: 20
              output: [xi_sl]
              xi_0_sl: [46562934.79] #optimised 
              xi_inf_sl: [114209889.9] #optimised 
              type: phenopowerlaw
                      
      numerics:
        grid:
          itmin: 2
          itmax: 100

